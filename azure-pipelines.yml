# Ruby
# Package your Ruby project.
# Add steps that install rails, analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/ruby

name: '$(SourceBranchName)-$(Build.SourceVersion) Build-$(Build.BuildId)'

trigger:
  batch: true
  branches:
    include:
      - develop

pr:
  autoCancel: true
  branches:
    include:
      - develop
      - feature/*

variables:
  application.name: 'et-api'
  azure.subscription.endpoint: 'hmcts-pet'
  manual.branch.prefix: 'develop'

jobs:
- job: TestApplication

  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - task: UseRubyVersion@0
    inputs:
      versionSpec: '2.7'

  - script: |
      export ENABLE_COVERAGE=true
      export DB_USERNAME=postgres
      export DB_PORT=5433
      CC_TEST_REPORTER=935a4195bd35a993666acc398a01a53daf4e7f11635e90a51c8f30b44cbe1ec9
      sudo apt-get update
      sudo apt-get install libpq-dev mcrypt libmcrypt-dev
      chmod +x ./bin/wait-for-it.sh
      sudo rm /usr/local/bin/docker-compose
      curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-Linux-x86_64 > docker-compose
      chmod +x docker-compose
      sudo mv docker-compose /usr/local/bin
      curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter && chmod +x ./cc-test-reporter
      sudo apt-get install pdftk
      gem install bundler -v 1.16.4
    displayName: 'before install'

  - script: |
      export ENABLE_COVERAGE=true
      export DB_USERNAME=postgres
      export DB_PORT=5433
      export CC_TEST_REPORTER=935a4195bd35a993666acc398a01a53daf4e7f11635e90a51c8f30b44cbe1ec9
      ./bin/dev/docker-support-services up -d && \
      ./bin/wait-for-it.sh localhost:5433 && \
      sleep 5 && \
      ./bin/wait-for-it.sh localhost:5433 && \
      ./bin/wait-for-it.sh localhost:10000 && \
      RAILS_ENV=test bundle install && bundle exec rails db:create db:migrate && \
      curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter && \
      chmod +x ./cc-test-reporter && \
      ./cc-test-reporter before-build
    displayName: 'before script'

  - script: |
      export ENABLE_COVERAGE=true
      export DB_USERNAME=postgres
      export DB_PORT=5433
      CC_TEST_REPORTER=935a4195bd35a993666acc398a01a53daf4e7f11635e90a51c8f30b44cbe1ec9
      RAILS_ENV=test bundle exec rspec && \
      RAILS_ENV=test cd vendor/gems/et_acas_api && BUNDLE_GEMFILE=$PWD/Gemfile bundle install && BUNDLE_GEMFILE=$PWD/Gemfile bundle exec rake db:create db:migrate && BUNDLE_GEMFILE=$PWD/Gemfile bundle exec rspec && \
      export
    displayName: 'script'


- job: BuildAndPushImage
  dependsOn: TestApplication
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  pool:
    vmImage: 'ubuntu-latest'
  steps:

  - bash: |
      repo_sha=$(git rev-parse --verify HEAD)
      docker_image_tag_sha=${repo_sha:0:7}
      echo "##vso[task.setvariable variable=DOCKER_TAG;isOutput=true]$(Build.SourceBranchName)-${docker_image_tag_sha}"
    displayName: 'Get Docker Tag'
    name: 'getDockerTag'

  - task: Docker@1
    displayName: login
    inputs:
      azureSubscriptionEndpoint: '$(azure.subscription.endpoint)'
      azureContainerRegistry: $(azure.container.registry)
      command: login

  - task: Docker@1
    displayName: 'Build an image'
    inputs:
      imageName: '$(application.name):$(getDockerTag.DOCKER_TAG)'
      arguments: '--build-arg APPVERSION=$(getDockerTag.DOCKER_TAG) --build-arg APP_BUILD_TAG=$(Build.SourceBranchName)-$(Build.SourceVersion) --build-arg APP_GIT_COMMIT=$(Build.SourceVersion)'


  - task: Docker@1
    displayName: 'Tag image'
    inputs:
      azureSubscriptionEndpoint: '$(azure.subscription.endpoint)'
      azureContainerRegistry: $(azure.container.registry)
      command: 'Tag image'
      imageName: '$(application.name):$(getDockerTag.DOCKER_TAG)'

  - task: Docker@1
    displayName: 'Push an image'
    inputs:
      azureSubscriptionEndpoint: '$(azure.subscription.endpoint)'
      azureContainerRegistry: $(azure.container.registry)
      command: 'Push an image'
      imageName: '$(application.name):$(getDockerTag.DOCKER_TAG)'

  - task: Docker@1
    displayName: logout
    inputs:
      command: logout

- job: ManualBuildAndPushImage
  dependsOn: TestApplication
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.Reason'], 'Manual'))
  pool:
    vmImage: 'ubuntu-latest'
  steps:

  - bash: |
      repo_sha=$(git rev-parse --verify HEAD)
      docker_image_tag_sha=${repo_sha:0:7}
      echo "##vso[task.setvariable variable=DOCKER_TAG;isOutput=true]$(manual.branch.prefix)-$(Build.SourceBranchName)-${docker_image_tag_sha}"
    displayName: 'Get Docker Tag'
    name: 'getDockerTag'

  - task: Docker@1
    displayName: login
    inputs:
      azureSubscriptionEndpoint: '$(azure.subscription.endpoint)'
      azureContainerRegistry: $(azure.container.registry)
      command: login

  - task: Docker@1
    displayName: 'Build an image'
    inputs:
      imageName: '$(application.name):$(getDockerTag.DOCKER_TAG)'
      arguments: '--build-arg APPVERSION=$(getDockerTag.DOCKER_TAG) --build-arg APP_BUILD_TAG=$(Build.SourceBranchName)-$(Build.SourceVersion) --build-arg APP_GIT_COMMIT=$(Build.SourceVersion)'


  - task: Docker@1
    displayName: 'Tag image'
    inputs:
      azureSubscriptionEndpoint: '$(azure.subscription.endpoint)'
      azureContainerRegistry: $(azure.container.registry)
      command: 'Tag image'
      imageName: '$(application.name):$(getDockerTag.DOCKER_TAG)'

  - task: Docker@1
    displayName: 'Push an image'
    inputs:
      azureSubscriptionEndpoint: '$(azure.subscription.endpoint)'
      azureContainerRegistry: $(azure.container.registry)
      command: 'Push an image'
      imageName: '$(application.name):$(getDockerTag.DOCKER_TAG)'

  - task: Docker@1
    displayName: logout
    inputs:
      command: logout
